// Initialize the game board with empty strings
let board = ['', '', '', '', '', '', '', '', ''];
// Set the initial player as 'X'
let currentPlayer = 'X';

// Define all possible winning combinations for the game

const winningCombinations = [
    [0, 1, 2], // Top row
    [3, 4, 5], // Middle row
    [6, 7, 8], // Bottom row
    [0, 3, 6], // Left column
    [1, 4, 7], // Middle column
    [2, 5, 8], // Right column
    [0, 4, 8], // Top-left to bottom-right diagonal
    [2, 4, 6]  // Top-right to bottom-left diagonal
];

// Select all the game cells
const cells = document.querySelectorAll('.cell');
// Get the element to display the current status
const statusDisplay = document.getElementById('status');
// Get the reset button
const resetButton = document.getElementById('resetButton');
// Get the celebration popup container
const celebration = document.getElementById('celebration');
// Get the winner message element inside the celebration popup
const winnerMessage = document.getElementById('winnerMessage');
// Get the play again button inside the celebration popup
const playAgainButton = document.getElementById('playAgainButton');

// Add click event listeners to all cells
cells.forEach(cell => {
    cell.addEventListener('click', handleCellClick);
});

// Add a click event listener to the reset button
resetButton.addEventListener('click', resetGame);

// Add a click event listener to the play again button
playAgainButton.addEventListener('click', () => {
    // Hide the celebration popup
    celebration.classList.remove('active');
    // Reset the game
    resetGame();
});

// Handle a cell click event
function handleCellClick(event) {
    const cell = event.target; // The clicked cell
    const index = cell.getAttribute('data-index'); // Get the cell's index

    // If the cell is already filled or there's already a winner, do nothing
    if (board[index] !== '' || checkWinner()) return;

    // Update the board with the current player's symbol
    board[index] = currentPlayer;
    // Add a class to style the cell (e.g., 'x' or 'o')
    cell.classList.add(currentPlayer.toLowerCase());
    // Display the player's symbol in the cell
    cell.textContent = currentPlayer;

    // Check if the current player has won
    if (checkWinner()) {
        statusDisplay.textContent = `Player ${currentPlayer} wins!`; // Update the status display
        celebrateWin(currentPlayer); // Show the celebration popup
    } 
    // Check if the board is full and there's no winner
    else if (board.every(cell => cell !== '')) {
        statusDisplay.textContent = 'It\'s a draw!'; // Update the status display for a draw
    } 
    // If the game is not over, switch the current player
    else {
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        statusDisplay.textContent = `Player ${currentPlayer}'s turn`; // Update the status display
    }
}

// Check if the current player has won
function checkWinner() {
    // Check each winning combination
    return winningCombinations.some(combination => {
        const [a, b, c] = combination; // Get indices of the combination
        return board[a] === currentPlayer && board[b] === currentPlayer && board[c] === currentPlayer;
    });
}

// Celebrate the winner
function celebrateWin(winner) {
    winnerMessage.textContent = `ðŸŽ‰ Player ${winner} Wins! ðŸŽ‰`; // Update the winner message
    celebration.classList.add('active'); // Show the celebration popup
}

// Reset the game
function resetGame() {
    board = ['', '', '', '', '', '', '', '', '']; // Clear the board
    currentPlayer = 'X'; // Reset the current player to 'X'
    // Clear the contents and classes of all cells
    cells.forEach(cell => {
        cell.textContent = '';
        cell.className = 'cell';
    });
    statusDisplay.textContent = `Player ${currentPlayer}'s turn`; // Reset the status display
}
